#+OPTIONS: author:nil ^:{}
#+HUGO_BASE_DIR: ~/waver/github/blog
#+HUGO_SECTION: post/2018
#+HUGO_CUSTOM_FRONT_MATTER: :toc true
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2018-04-01 日 22:47]
#+TITLE: Java中的逆变与协变
#+HUGO_TAGS: Java
#+HUGO_CATEGORIES: Java


本文转自> [[http://www.cnblogs.com/en-heng/][Treant --
Java中的逆变与协变]]

** 开篇
   :PROPERTIES:
   :CUSTOM_ID: 开篇
   :END:
看下面一段代码

#+begin_src java
Number num = new Integer(1);  
ArrayList<Number> list = new ArrayList<Integer>(); //type mismatch

List<? extends Number> list = new ArrayList<Number>();
list.add(new Integer(1)); //error
list.add(new Float(1.2f));  //error
#+end_src

有人会纳闷，为什么=Number=的对象可以由=Integer=实例化，而=ArrayList<Number>=的对象却不能由=ArrayList<Integer>=实例化？list 中的=<? extends Number>=声明其元素是=Number=或=Number=的派生类，为什么不能 add
=Integer=和=Float=?为了解决这些问题，我们需要了解 Java 中的逆变和协变以及泛型中通配符用法。

** 1. 逆变与协变
   :PROPERTIES:
   :CUSTOM_ID: 逆变与协变
   :END:
在介绍逆变与协变之前，先引入=Liskov 替换原则=（Liskov Substitution
Principle, LSP）。

*** Liskov 替换原则
    :PROPERTIES:
    :CUSTOM_ID: liskov 替换原则
    :END:
*LSP 由 Barbara Liskov 于 1987 年提出，其定义如下：*

#+begin_quote
  所有引用基类（父类）的地方必须能透明地使用其子类的对象。
#+end_quote

LSP 包含以下四层含义：

- 子类完全拥有父类的方法，且具体子类必须实现父类的抽象方法。
- 子类中可以增加自己的方法。
- 当子类覆盖或实现父类的方法时，方法的形参要比父类方法的更为宽松。
- 当子类覆盖或实现父类的方法时，方法的返回值要比父类更严格。

前面的两层含义比较好理解，后面的两层含义会在下文中详细解释。根据 LSP，我们在实例化对象的时候，可以用其子类进行实例化，比如：

#+begin_src java
Number num = new Integer(1);
#+end_src

*** 定义
    :PROPERTIES:
    :CUSTOM_ID: 定义
    :END:
逆变与协变用来描述类型转换（type
transformation）后的继承关系，其定义：如果 A、B 表示类型，f(⋅)表示类型转换，≤表示继承关系(比如，A≤B 表示 A 是由 B 派生出来的子类);

- f(⋅)是逆变（contravariant）的，当 A≤B 时有 f(B)≤f(A)成立；
- f(⋅)是协变（covariant）的，当 A≤B 时有 f(A)≤f(B)成立；
- f(⋅)是不变（invariant）的，当 A≤B 时上述两个式子均不成立，即 f(A)与 f(B)相互之间没有继承关系。

*** 类型转换
    :PROPERTIES:
    :CUSTOM_ID: 类型转换
    :END:
接下来，我们看看 Java 中的常见类型转换的协变性、逆变性或不变性。

**** 泛型
     :PROPERTIES:
     :CUSTOM_ID: 泛型
     :END:
令=f(A)=ArrayList<A>=，那么 f(⋅)时逆变、协变还是不变的呢？如果是逆变，则=ArrayList<Integer>=是=ArrayList<Number>=的父类型；如果是协变，则=ArrayList<Integer>=是=ArrayList<Number>=的子类型；如果是不变，二者没有相互继承关系。开篇代码中用=ArrayList<Integer>=实例化=list=的对象错误，则说明泛型是不变的。

**** 数组
     :PROPERTIES:
     :CUSTOM_ID: 数组
     :END:
令=f(A)=[]A=，容易证明数组是协变的：

#+begin_src java
Number[] numbers = new Integer[3];
#+end_src

**** 方法
     :PROPERTIES:
     :CUSTOM_ID: 方法
     :END:
调用方法=result = method(n)=；根据 Liskov 替换原则，传入形参 n 的类型应为 method 形参的子类型，即=typeof(n)≤typeof(method's parameter)=；result 应为 method 返回值的基类型，即=typeof(methods's return)≤typeof(result)=：

#+begin_src java
static Number method(Number num) {
    return 1;
}

Object result = method(new Integer(2)); //correct
Number result = method(new Object()); //error
Integer result = method(new Integer(2)); //error
#+end_src

在 Java
1.4 中，子类覆盖（override）父类方法时，形参与返回值的类型必须与父类保持一致：

#+begin_src java
class Super {
    Number method(Number n) { ... }
}

class Sub extends Super {
    @Override
    Number method(Number n) { ... }
}
#+end_src

从 Java 1.5 开始，子类覆盖父类方法时允许协变返回更为具体的类型：

#+begin_src java
class Super {
    Number method(Number n) { ... }
}

class Sub extends Super {
    @Override
    Integer method(Number n) { ... }
}
#+end_src

** 2. 泛型中的通配符
   :PROPERTIES:
   :CUSTOM_ID: 泛型中的通配符
   :END:
*** 实现泛型的协变与逆变
    :PROPERTIES:
    :CUSTOM_ID: 实现泛型的协变与逆变
    :END:
Java 中泛型是不变的，可有时需要实现逆变与协变，怎么办呢？这时，通配符?派上了用场：

=<? extends>=实现了泛型的协变，比如：
=List<? extends Number> list = new ArrayList<Integer>();=
=<? super>=实现了泛型的逆变，比如：
=List<? super Number> list = new ArrayList<Object>();=

*** extends 与 super
    :PROPERTIES:
    :CUSTOM_ID: extends 与 super
    :END:
为什么（开篇代码中）=List<? extends Number> list=在 add
=Integer=和=Float=会发生编译错误？首先，我们看看 add 的实现：

#+begin_src java
public interface List<E> extends Collection<E> {
    boolean add(E e);
}
#+end_src

在调用 add 方法时，泛型 E 自动变成了=<? extends Number>=，其表示 list 所持有的类型为在=Number=与=Number=派生子类中的某一类型，其中包含=Integer=类型却又不特指为=Integer=类型（=Integer=像个备胎一样！！！），故 add
=Integer=时发生编译错误。为了能调用 add 方法，可以用=super=关键字实现：

#+begin_src java
List<? super Number> list = new ArrayList<Object>();
list.add(new Integer(1));
list.add(new Float(1.2f));
#+end_src

=<? super Number>=表示 list 所持有的类型为在=Number=与=Number=的基类中的某一类型，其中=Integer=与=Float=必定为这某一类型的子类；所以 add 方法能被正确调用。从上面的例子可以看出，=extends=确定了泛型的上界，而=super=确定了泛型的下界。

*** PECS
    :PROPERTIES:
    :CUSTOM_ID: pecs
    :END:
现在问题来了：究竟什么时候用 extends 什么时候用 super 呢？《Effective
Java》给出了答案：

#+begin_quote
  PECS: producer-extends, consumer-super.
#+end_quote

比如，一个简单的=Stack API=：

#+begin_src java
public class  Stack<E>{
    public Stack();
    public void push(E e):
    public E pop();
    public boolean isEmpty();
}
#+end_src

要实现=pushAll(Iterable<E> src)=方法，将 src 的元素逐一入栈：

#+begin_src java
public void pushAll(Iterable<E> src){
    for(E e : src)
        push(e)
}
#+end_src

假设有一个实例化=Stack<Number>=的对象 stack，src 有=Iterable<Integer>=与
=Iterable<Float>=；在调用 pushAll 方法时会发生 type
mismatch 错误，因为 Java 中泛型是不可变的，=Iterable<Integer>=与
=Iterable<Float>=都不是=Iterable<Number>=的子类型。因此，应改为

#+begin_src java
// Wildcard type for parameter that serves as an E producer
public void pushAll(Iterable<? extends E> src) {
    for (E e : src)
        push(e);
}
#+end_src

要实现=popAll(Collection<E> dst)=方法，将=Stack=中的元素依次取出 add 到 dst 中，如果不用通配符实现：

#+begin_src java
// popAll method without wildcard type - deficient!
public void popAll(Collection<E> dst) {
    while (!isEmpty())
        dst.add(pop());   
}
#+end_src

同样地，假设有一个实例化=Stack<Number>=的对象 stack，dst 为=Collection<Object>=；调用 popAll 方法是会发生 type
mismatch 错误，因为=Collection<Object>=不是=Collection<Number>=的子类型。因而，应改为：

#+begin_src java
// Wildcard type for parameter that serves as an E consumer
public void popAll(Collection<? super E> dst) {
    while (!isEmpty())
        dst.add(pop());
}
#+end_src

在上述例子中，在调用 pushAll 方法时生产了 E 实例（produces E
instances），在调用 popAll 方法时 dst 消费了 E 实例（consumes E
instances）。Naftalin 与 Wadler 将 PECS 称为 *Get and Put Principle*。

=java.util.Collections=的 copy 方法(JDK1.7)完美地诠释了=PECS=：

#+begin_src java
public static <T> void copy(List<? super T> dest, List<? extends T> src) {
    int srcSize = src.size();
    if (srcSize > dest.size())
        throw new IndexOutOfBoundsException("Source does not fit in dest");

    if (srcSize < COPY_THRESHOLD ||
        (src instanceof RandomAccess && dest instanceof RandomAccess)) {
        for (int i=0; i<srcSize; i++)
            dest.set(i, src.get(i));
    } else {
        ListIterator<? super T> di=dest.listIterator();
        ListIterator<? extends T> si=src.listIterator();
        for (int i=0; i<srcSize; i++) {
            di.next();
            di.set(si.next());
        }
    }
}
#+end_src

**** PECS 总结：
     :PROPERTIES:
     :CUSTOM_ID: pecs 总结
     :END:
- 要从泛型类取数据时，用 extends；
- 要往泛型类写数据时，用 super；
- 既要取又要写，就不用通配符（即 extends 与 super 都不用）。
