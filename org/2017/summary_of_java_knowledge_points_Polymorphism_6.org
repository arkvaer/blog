#+OPTIONS: author:nil ^:{}
#+HUGO_BASE_DIR: ~/waver/github/blog
#+HUGO_SECTION: post/2017
#+HUGO_CUSTOM_FRONT_MATTER: :toc true
#+HUGO_AUTO_SET_LASTMOD: t
#+HUGO_DRAFT: false
#+DATE: [2017-12-26 二 13:30]
#+TITLE: JavaReview-day08-多态
#+HUGO_TAGS: Java
#+HUGO_CATEGORIES: Java


** 多态
   :PROPERTIES:
   :CUSTOM_ID: 多态
   :END:
*** 多态的特点
    :PROPERTIES:
    :CUSTOM_ID: 多态的特点
    :END:
1. 在多态中, 成员函数的特点:

- 在编译时期: 参阅引用型变量所属的类中是否有调用的方法. 如果有,
  编译通过; 如果没有, 编译失败
- 在运行时期: 参阅对象所属类的中是否有调用的方法
- *简单总结就是:* 成员函数在多态调用时, 编译看左边, 运行看右边;
  因为成员函数存在覆盖特性。

2. [@2] 在多态中, 成员变量的特点:

- 无论编译和运行, 都参考左边(引用型变量所属的类);

3. [@3] 在多态中, 静态成员函数的特点:

- 无论编译和运行, 都参考左边(引用型变量所属的类);
- 其实对于静态方法，是不需要对象的。直接用类名调用即可。

#+begin_src java
class Fu
{
//  int num = 3;
    void show()
    {
        System.out.println("fu show");
    }

    static void method()
    {
        System.out.println("fu static method");
    }
}

class Zi extends Fu
{
//  int num = 4;
    void show()
    {
        System.out.println("zi show");
    }

    static void method()
    {
        System.out.println("zi static method");
    }
}



class  DuoTaiDemo3
{
    public static void main(String[] args)
    {
        Fu.method();
        Zi.method();
        Fu f = new Zi();//
//      f.method();
//      f.show();
//      System.out.println(f.num);


//      Zi z = new Zi();
//      System.out.println(z.num);
    }
}

#+end_src
